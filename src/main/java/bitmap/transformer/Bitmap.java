/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bitmap.transformer;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.Buffer;

public class Bitmap {
    BufferedImage image;

    public static void main(String[] args) {
//        File imagePath = new File("src/main/resource/image_file2.bmp");
        File inputPath = new File(args[0]);

        try {
            BufferedImage image = ImageIO.read(inputPath);
            Bitmap bitmapImage = new Bitmap(image);
            if (args[2].equals("grayScale")) {
                bitmapImage.grayscaleTransform(args[1]);

            }else if(args[2].equals("horizontal")){
                bitmapImage.horizontalFlip((args[1]));
            }
        } catch (IOException e) {
            e. printStackTrace();
        }
    }

    public void grayscaleTransform(String outputPath) {
        BufferedImage grayscale = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
        for(int i = 0; i < image.getWidth(); i++){
            for(int j = 0; j < image.getHeight(); j++) {
                Color c = new Color(image.getRGB(i,j));

                int r = c.getRed();
                int g = c.getGreen();
                int b = c.getBlue();
                int a = c.getAlpha();

                int gr = (r + g + b) / 3;

                Color gColor = new Color(gr, gr, gr, a);
                grayscale.setRGB(i, j, gColor.getRGB());
            }
        }
        this.writeImageToFile(grayscale, outputPath);
    }

    public void horizontalFlip(String outputPath) {
//        float cx = image.getWidth() / 2f;
//        float cy = image.getHeight()/ 2f;
//        BufferedImage flippedImage = image.flip(-1f, 1f, cx, cy);

        for(int y = 0; y < image.getHeight(); y++){
            int tempIndex = image.getWidth() - 1;
            int x = 0;
            while(x != tempIndex){
                int p1 = image.getRGB(x,y);
                int p2 = image.getRGB(tempIndex, y);
                image.setRGB(x,y, p2);
                image.setRGB(tempIndex,y, p1);
                tempIndex--;
                x++;
            }

        }
        this.writeImageToFile(image, outputPath);
    }


    public void writeImageToFile(BufferedImage grayscale, String output){
        try {
            ImageIO.write(grayscale, "bmp", new File(output));
            System.out.println(grayscale);
        } catch (IOException e) {
            e. printStackTrace();
        }
    }

    public Bitmap(BufferedImage image) {
        this.image = image;
    }
}
